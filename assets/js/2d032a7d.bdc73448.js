"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([["30553"],{22907:function(e,s,n){n.r(s),n.d(s,{metadata:()=>t,contentTitle:()=>i,default:()=>h,assets:()=>l,toc:()=>d,frontMatter:()=>a});var t=JSON.parse('{"id":"QodlyinCloud/qodlyScript/commands/semaphore","title":"semaphore","description":"semaphore ( semaphore integer \\\\} ) : boolean","source":"@site/versioned_docs/version-R10/QodlyinCloud/qodlyScript/commands/semaphore.md","sourceDirName":"QodlyinCloud/qodlyScript/commands","slug":"/QodlyinCloud/qodlyScript/commands/semaphore","permalink":"/docs/QodlyinCloud/qodlyScript/commands/semaphore","draft":false,"unlisted":false,"editUrl":"https://github.com/qodly/docs/issues/new?title=Comment%20on%20QodlyinCloud%2FqodlyScript%2Fcommands%2Fsemaphore.md%20(R10)&body=Share%20any%20feedback%20about%20this%20page%20%E2%80%94%20report%20issues%2C%20suggest%20improvements%2C%20or%20tell%20us%20what%E2%80%99s%20helpful.%0A%0AIf%20it%E2%80%99s%20an%20issue%3A%0A-%20What%E2%80%99s%20the%20issue%3F%20(e.g.%2C%20typo%2C%20incorrect%20information%2C%20unclear%20explanation)%0A-%20Where%20is%20it%3F%20(e.g.%2C%20section%20name%2C%20specific%20paragraph%2C%20or%20line)%0A%0AThank%20you%20for%20helping%20us%20improve!%20%F0%9F%9A%80%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20","tags":[],"version":"R10","frontMatter":{"id":"semaphore","title":"semaphore"},"sidebar":"QodlyCloud","previous":{"title":"round","permalink":"/docs/QodlyinCloud/qodlyScript/commands/round"},"next":{"title":"session","permalink":"/docs/QodlyinCloud/qodlyScript/commands/session"}}'),r=n("85893"),o=n("50065");let a={id:"semaphore",title:"semaphore"},i=void 0,l={},d=[{value:"Description",id:"description",level:4},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"See also",id:"see-also",level:4}];function c(e){let s={a:"a",admonition:"admonition",code:"code",em:"em",h4:"h4",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"semaphore"})," ( ",(0,r.jsx)(s.em,{children:"semaphore"})," : string { , ",(0,r.jsx)(s.em,{children:"tickCount"})," : integer } ) : boolean"]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Parameter"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{style:{textAlign:"center"}}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"semaphore"}),(0,r.jsx)(s.td,{children:"string"}),(0,r.jsx)(s.td,{style:{textAlign:"center"},children:"\u2192"}),(0,r.jsx)(s.td,{children:"Semaphore to test and set"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"tickCount"}),(0,r.jsx)(s.td,{children:"integer"}),(0,r.jsx)(s.td,{style:{textAlign:"center"},children:"\u2192"}),(0,r.jsx)(s.td,{children:"Maximum waiting time"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Result"}),(0,r.jsx)(s.td,{children:"boolean"}),(0,r.jsx)(s.td,{style:{textAlign:"center"},children:"\u2190"}),(0,r.jsx)(s.td,{children:"false: semaphore has been successfully set, true: semaphore was already set"})]})]})]}),"\n",(0,r.jsx)(s.h4,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"semaphore"})," command returns ",(0,r.jsx)(s.code,{children:"true"})," and does nothing if ",(0,r.jsx)(s.em,{children:"semaphore"})," already exists, or creates ",(0,r.jsx)(s.em,{children:"semaphore"})," and returns ",(0,r.jsx)(s.code,{children:"false"})," if it does not exist."]}),"\n",(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.strong,{children:"semaphore"})," is a flag shared among processes. A semaphore simply exists or does not exist. The methods that each process is running can test for the existence of a semaphore. A semaphore can only be removed by the process that created it. By creating and testing semaphores, methods can communicate between processes. You do not use semaphores to protect data access (this is automatically done by the Qodly Server), you use semaphores to prevent several processes from performing the same operation at the same time."]})}),"\n",(0,r.jsxs)(s.p,{children:["Only one process at a time can create a semaphore. If ",(0,r.jsx)(s.code,{children:"semaphore"})," returns ",(0,r.jsx)(s.code,{children:"false"}),", it means that the semaphore did not exist, but it also means that the ",(0,r.jsx)(s.em,{children:"semaphore"})," has been set for the process in which the call has been made."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"semaphore"})," returns ",(0,r.jsx)(s.code,{children:"false"})," if the ",(0,r.jsx)(s.em,{children:"semaphore"})," was not set. It also returns ",(0,r.jsx)(s.code,{children:"false"})," if the semaphore is already set by the same process in which the call has been made."]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.em,{children:"semaphore"})," name is limited to 255 characters. If you pass a longer string, the semaphore will be tested with the truncated string. Keep in mind that semaphore names are case-sensitive."]}),"\n",(0,r.jsxs)(s.p,{children:["The optional parameter ",(0,r.jsx)(s.em,{children:"tickCount"})," allows you to specify a waiting time (in ticks) if ",(0,r.jsx)(s.em,{children:"semaphore"})," is already set. In this case, the function will wait either for the semaphore to be freed or the waiting time to expire before returning ",(0,r.jsx)(s.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsx)(s.p,{children:"Here is typical code for using a semaphore:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-qs",children:'while(semaphore("MySemaphore",300))\n\nend\n  // place code protected by semaphore here\nclearSemaphore("MySemaphore")\n'})}),"\n",(0,r.jsx)(s.h4,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsx)(s.p,{children:"This method allows you to not execute a method when a semaphore is present; the method alerts the calling method with an error code and plain text."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-qs",children:"// calling code\ndeclare -> result : object\nresult = semaphore_proof\n// result.code: error code\n// result.message: error text\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-qs",children:'  // Protective structure using semaphores\n var result : object\n\n\n  // Start of method\n var L_MyError : integer\n L_MyError = 1\n\n var t_Sema : string\n t_Sema = "tictac"\n\n if(semaphore(t_Sema,300))\n  // We expected 300 ticks but the semaphore\n  // was not released by the one that placed it:\n  // we end up here\n    L_MyError = -1\n\n else\n\n  // This method is only run by one process at a time\n  // We placed the semaphore as we entered\n  // so we\'re the only ones that can remove it\n\n  // Do something\n    ...\n  // Then finish by removing the semaphore\n    clearSemaphore(t_Sema)\n end\n\n var t_Message : string\n if(L_MyError == -1)\n    t_Message = "The semaphore "+t_Sema+" has blocked access to the rest of the code"\n else\n    t_Message = "OK"\n end\n\n result = {code : L_MyError, message : t_Message)\n  // The calling method receives an error code and an explanation in plain text\n'})}),"\n",(0,r.jsx)(s.h4,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/docs/QodlyinCloud/qodlyScript/commands/clearSemaphore",children:(0,r.jsx)(s.code,{children:"clearSemaphore"})}),(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.a,{href:"/docs/QodlyinCloud/qodlyScript/SignalClass",children:[(0,r.jsx)(s.code,{children:"Signal"})," class"]})]})]})}function h(e={}){let{wrapper:s}={...(0,o.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,s,n){n.d(s,{Z:function(){return i},a:function(){return a}});var t=n(67294);let r={},o=t.createContext(r);function a(e){let s=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);